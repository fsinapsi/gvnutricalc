;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; incrementa il parziale p di x% di alimento node;
; p è un assoc, node un nodo del db, x razionale

(defnet alimento-inc (p node x)
        (deflocal succ)

        (for succ in node do
                (inc <p (dgraph-get-name succ)> (* (dgraph-get-link-val node succ) x 0.01)) ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; expande un pasto;
; se non è espandibile rende p stesso

(defun alimento-expand-step (p) net alimento-expand-step)
(defnet alimento-expand-step (p @p)
        (deflocal nutrienti db k i n x)

        (set @p (assoc))
        (set nutrienti <_kv "nutrienti">)
        (set db <_kv "db">)
        (set k true)
        (for i in p do
                (set n (car i))
                (set x (cdr i))
                (if (in n nutrienti)
                then    (inc <@p n> x)
                else    (alimento-inc @p (dgraph-get-node db n) x)
                        (set k false) ))
        (if k
        then    (set @p p) ))

(defun alimento-expand (p) net alimento-expand)
(defnet alimento-expand (p @p)
        (repeat (alimento-expand-step p @p)
                until (eq @p p)
                (set p @p) ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun gui-succ (alimento) net gui-succ)
(defnet gui-succ (alimento @asc)
        (deflocal db q i j)

        (set db <_kv "db">)
        (set q (queue))
        (set @asc (assoc))
        (for i in alimento do
                (set j (car i))
                (queue-put q j)
                (set <@asc j> true) )
        (while (> (length q) 0) do
                (for i in (dgraph-get-node db (queue-get q)) do
                        (set j (dgraph-get-name i))
                        (if (= <@asc j> undef)
                        then    (queue-put q j)
                                (set <@asc j> true) ))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun gui-fonti (alimento) net gui-fonti)
(defnet gui-fonti (alimento @a)
        (deflocal db q asc n i j)

        (set db <_kv "db">)
        (set q (queue))
        (queue-put q alimento)
        (set asc (assoc))
        (set @a (array 0))
        (while (> (length q) 0) do
                (set n (dgraph-get-node db (queue-get q)))
                (for i in (dgraph-queue-in n) do
                        (if (> (dgraph-get-link-val i n) 0)
                        then    (set j (dgraph-get-name i))
                                (if (= <asc j> undef)
                                then    (set <asc j> true)
                                        (array-append @a j)
                                        (queue-put q j) ))))
        (array-append @a alimento)
        (sort @a) )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun calorie (a) net calorie)
(defnet calorie (a @v)
        (deflocal c g p f o e)

        (set c (* (kcal-carboidrati) (rational-default-zero <a "carboidrati">)))
        (set g (* (kcal-grassi) (rational-default-zero <a "grassi">)))
        (set p (* (kcal-proteine) (rational-default-zero <a "proteine">)))
        (set f (* (kcal-fibre) (rational-default-zero <a "fibre">)))
        (set o (* (kcal-alcol) (rational-default-zero <a "alcol">)))
        (set e (+ c g p f o))
        (set @v (if (> e 0) (list e
                (* 100 (/ c e)) (* 100 (/ g e)) (* 100 (/ p e)) (* 100 (/ o e))
                (* (kcal-carboidrati) 100 (/ (rational-default-zero <a "carboidrati zuccheri">) e))
                (* (kcal-grassi) 100 (/ (rational-default-zero <a "grassi saturi">) e))
                (* 100 (/ (rational-default-zero <a "fibre">) e)) )
                [ 0 0 0 0 0 0 0 0 ] )))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun pri (nut) <_kv "larn" 0 nut>)
(defun ai (nut) <_kv "larn" 1 nut>)
(defun ar (nut) <_kv "larn" 2 nut>)
(defun ul (nut) <_kv "larn" 3 nut>)
(defun sdt (nut) <_kv "larn" 4 nut>)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defnet dgraph-link-name (g name1 name2 val)
        (dgraph-link-name-low false g name1 name2 val) )

(defnet dgraph-link-name-acyclic (g name1 name2 val)
        (dgraph-link-name-low true g name1 name2 val) )

(defnet dgraph-link-name-low (acyclic g name1 name2 val)
        (deflocal node1 node2)

        (set node1 (dgraph-get-node g name1))
        (if (= node1 undef)
        then    (set node1 (dgraph-node g undef name1)) )
        (set node2 (dgraph-get-node g name2))
        (if (= node2 undef)
        then    (set node2 (dgraph-node g undef name2)) )
        (if acyclic
        then    (dgraph-link-acyclic node1 node2 val)
        else    (dgraph-link node1 node2 val) ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defnet da-chiudere (obj)
        (queue-put <_kv "da-chiudere"> obj) )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;                                                                      ;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

